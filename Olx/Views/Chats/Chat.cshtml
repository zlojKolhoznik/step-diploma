@using Microsoft.AspNetCore.Identity
@using Olx.Models
@model List<Olx.Models.Message>
@inject UserManager<User> UserManager

@{
    ViewBag.Title = "Chat on " + (ViewBag.Product as Product)!.Name;
    Layout = "_Layout";
}

<h2>@ViewBag.Title</h2>
<div class="wrapper">
    <div class="chat-container">
        @if (Model.Any())
        {
            @foreach (var message in Model)
            {
                <div class="chat-message @(message.SenderId == UserManager.GetUserId(User) ? "darker" : "")" data-id="@message.Id">
                    <div class="chat-message-header">
                        <span class="chat-message-sender">@message.Sender.UserName</span>
                        <span class="chat-message-date">@message.CreatedAt</span>
                        @if (message.IsRead)
                        {
                            <i class="bi bi-check-all" style="color: #a52834"></i>
                        }
                        else
                        {
                            <i class="bi bi-check-all" style="color: #41464b"></i>
                        }
                    </div>
                    <div class="chat-message-content">
                        @if (message.ImageUrl is not null)
                        {
                            <img src="~/@message.ImageUrl.Replace('\\', '/')" alt="Image" class="message-image"/>
                        }
                        @if (message.Text is not null)
                        {
                            <p class="message-text">@message.Text</p>
                        }
                    </div>
                </div>
            }
        }
        else
        {
            <p>No messages found.</p>
        }
    </div>
    <div class="row" id="messageInputForm">
        <div class="col-md-2">
            <form enctype="multipart/form-data" method="post">
                <div class="image-input-container">
                    <i class="bi bi-card-image"></i>
                    <span class="tooltip">Add image</span>
                </div>
                <input type="file" name="image" class="image-input" accept="image/*"/>
            </form>
        </div>
        <div class="col-md-8">
            <input type="text" name="message" class="form-control" placeholder="Type a message..."/>
        </div>
        <div class="col-md-2">
            <button class="btn btn-primary" id="sendMessage">Send</button>
        </div>
    </div>
</div>

@section Scripts
{
    <script src="~/js/chat.js"></script>
    <script type="text/javascript">
    $(document).ready(() =>{
        $('.image-input-container').on('click', e => {
            $('.image-input').click();
            e.stopPropagation();
        });
    
        $('#sendMessage').on('click', e => {
           let message = $('input[name="message"]').val();
           let image = undefined;
           console.log($('input[name="image"]').prop('files'));
           if ($('input[name="image"]').prop('files') !== undefined && $('input[name="image"]').prop('files').length > 0) {
                image = $('input[name="image"]').prop('files')[0];
           }
           
           console.log(image);
           
           let formData = new FormData();
           formData.append('message', message);
           formData.append('image', image);
           formData.append('senderId', '@UserManager.GetUserId(User)');
           let receiverId = '@((ViewBag.Product as Product)!.OwnerId)';
           if (receiverId === '@UserManager.GetUserId(User)') {
               receiverId = '@Model.FirstOrDefault()?.SenderId'; // the first message is always from the buyer
           }
           formData.append('receiverId', receiverId);
           $.ajax({
               url: '@Url.Action("SendMessage", "Chats", new { id = (ViewBag.Product as Product)!.Id })',
               type: 'POST',
               data: formData,
               processData: false,
               contentType: false,
               success: data => {
                   console.log(connection);
                   let {userId, messageId, imageUrl} = data;
                   console.log(userId, messageId);
                   connection.invoke('SendMessage', userId, messageId);
                   let div = createMessageElement(messageId, '@UserManager.GetUserName(User)',
                    '@DateTime.Now.ToString("dd.MM.yyyy hh:mm:ss")', false, message,  imageUrl, true);
                    $('.chat-container').append(div);
                    $('.chat-container').scrollTop($('.chat-container')[0].scrollHeight);
                    $('input[name=message]').val('');
                    $('input[name=image]').val('');
               },
               error: err => {
                   console.log(err);
               }
           });
        });
        $('.chat-container').scrollTop($('.chat-container')[0].scrollHeight);
    });
    </script>
}

@section Styles
{
    <style>
        .wrapper {
            border: 2px solid #dedede;
            background-color: #f1f1f1;
            border-radius: 5px;
            padding: 10px;
            margin: 10px 0;
        }
        
        .chat-container {
            overflow: auto;
            height: 400px;
            border-bottom: 1px solid #ccc;
        }
        
        .darker {
            border-color: #ccc;
            background-color: #ddd;
        }
        
        .chat-container::after {
            content: "";
            clear: both;
            display: table;
        }
        
        .chat-container img {
            border-radius: 5%;
        }
        
        .chat-message-date {
            float: right;
            color: #aaa;
        }
        
        .chat-message-header {
            padding: 10px;
        }
        
        .chat-message-sender {
            font-weight: bold;
        }
        
        .chat-message-content {
            padding: 10px;
            margin: 10px 0;
        }
        
        .message-image {
            max-width: 100%;
            max-height: 200px;
        }
        
        .message-text {
            margin: 0;
        }
        
        .image-input-container {
            position: relative;
            display: inline-block;
            cursor: pointer;
            font-size: 32px;
        }
        
        .image-input {
            display: none;
        }
        .tooltip {
            visibility: hidden;
            width: 120px;
            background-color: black;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px 0;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            margin-left: -60px;
            opacity: 0;
            transition: opacity 0.3s;
        }
        
        .image-input-container:hover .tooltip {
            visibility: visible;
            opacity: .75;
        }
        
        #messageInputForm {
            margin-top: 10px;
            text-align: center;
        }
    </style>
}
